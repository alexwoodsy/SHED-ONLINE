[{"C:\\Users\\alexw\\Documents\\programming projects\\SHED-online\\src\\index.js":"1","C:\\Users\\alexw\\Documents\\programming projects\\SHED-online\\src\\reportWebVitals.js":"2","C:\\Users\\alexw\\Documents\\programming projects\\SHED-online\\src\\pages\\homescreen.js":"3","C:\\Users\\alexw\\Documents\\programming projects\\SHED-online\\src\\pages\\lobby.js":"4","C:\\Users\\alexw\\Documents\\programming projects\\SHED-online\\src\\config.js":"5","C:\\Users\\alexw\\Documents\\programming projects\\SHED-online\\src\\game\\Game.js":"6","C:\\Users\\alexw\\Documents\\programming projects\\SHED-online\\src\\game\\Table.js":"7","C:\\Users\\alexw\\Documents\\programming projects\\SHED-online\\src\\game\\card.js":"8","C:\\Users\\alexw\\Documents\\programming projects\\SHED-online\\src\\game\\CardImages.js":"9","C:\\Users\\alexw\\Documents\\programming projects\\SHED-online\\src\\game\\gameUI.js":"10","C:\\Users\\alexw\\Documents\\programming projects\\SHED-online\\src\\pages\\gameroom.js":"11"},{"size":4356,"mtime":1615830407729,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":499162500000,"results":"14","hashOfConfig":"13"},{"size":622,"mtime":1615496555080,"results":"15","hashOfConfig":"13"},{"size":7766,"mtime":1615838205264,"results":"16","hashOfConfig":"13"},{"size":156,"mtime":1615925310912,"results":"17","hashOfConfig":"13"},{"size":26521,"mtime":1615914668794,"results":"18","hashOfConfig":"13"},{"size":25567,"mtime":1615926346884,"results":"19","hashOfConfig":"13"},{"size":8419,"mtime":1615925545731,"results":"20","hashOfConfig":"13"},{"size":3728,"mtime":1615578063102,"results":"21","hashOfConfig":"13"},{"size":9560,"mtime":1615844886783,"results":"22","hashOfConfig":"13"},{"size":8009,"mtime":1615926391852,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"19mmtle",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\alexw\\Documents\\programming projects\\SHED-online\\src\\index.js",[],["48","49"],"C:\\Users\\alexw\\Documents\\programming projects\\SHED-online\\src\\reportWebVitals.js",[],"C:\\Users\\alexw\\Documents\\programming projects\\SHED-online\\src\\pages\\homescreen.js",[],"C:\\Users\\alexw\\Documents\\programming projects\\SHED-online\\src\\pages\\lobby.js",[],"C:\\Users\\alexw\\Documents\\programming projects\\SHED-online\\src\\config.js",[],"C:\\Users\\alexw\\Documents\\programming projects\\SHED-online\\src\\game\\Game.js",[],"C:\\Users\\alexw\\Documents\\programming projects\\SHED-online\\src\\game\\Table.js",[],"C:\\Users\\alexw\\Documents\\programming projects\\SHED-online\\src\\game\\card.js",[],"C:\\Users\\alexw\\Documents\\programming projects\\SHED-online\\src\\game\\CardImages.js",[],"C:\\Users\\alexw\\Documents\\programming projects\\SHED-online\\src\\game\\gameUI.js",["50"],"import React, {useRef, useEffect} from \"react\"; //, { useEffect, useState }\r\nimport { Image, Group, Text, Rect } from 'react-konva';\r\nimport useImage from 'use-image';\r\n//magic\r\nimport burn from '../images/magicEvents/burn.png'\r\nimport invisible from '../images/magicEvents/Invis.png'\r\nimport HighOrLow from '../images/magicEvents/HighOrLow.png'\r\nimport reset from '../images/magicEvents/reset.png'\r\n//ui\r\nimport wood from '../images/UI/wood.png'\r\nimport waitingImg from '../images/UI/Waiting.png'\r\nimport yourTurnImg from '../images/UI/YourTurn.png'\r\n//benchui\r\nimport benchReady from '../images/UI/BenchReady.png'\r\nimport benchUnready from '../images/UI/BenchUnready.png'\r\n//sevenchoices\r\nimport higherArrow from '../images/magicEvents/HigherArrow.png'\r\nimport lowerArrow from '../images/magicEvents/LowerArrow.png'\r\n//gameover\r\nimport winnerScreen from '../images/Winner.png'\r\nimport loserScreen from '../images/Loser.png'\r\n\r\n\r\nconst MagicImages = {\r\n  burn: burn,\r\n  invisble: invisible,\r\n  highOrLow: HighOrLow,\r\n  reset: reset,\r\n  wood: wood,\r\n}\r\n\r\nexport function imageRatio (image) {\r\n  //scale image\r\n  let imgRatio=1; //inni to 1 ao image still renders\r\n  if (image !== undefined) {\r\n    imgRatio = image.width/image.height\r\n  }\r\n  return imgRatio //default\r\n}\r\n\r\nconst MagicImage = (props) => {\r\n  let magicEvent = props.magicEvent;\r\n  let img;\r\n  switch (magicEvent.type) {\r\n    case 'burning': \r\n      img = MagicImages.burn\r\n      break;\r\n    case 'Invisible':\r\n      img = MagicImages.invisble\r\n      break;\r\n    case 'reset':\r\n      img = MagicImages.reset\r\n      break;\r\n    case 'Higher or lower':\r\n      img = MagicImages.highOrLow\r\n      break;\r\n    default: \r\n    img = MagicImages.wood\r\n    break;\r\n  }\r\n\r\n  const [image] = useImage(img);\r\n  let scale = props.scale*30\r\n  let width = scale*imageRatio(image);\r\n  let height = scale;\r\n  let x = props.x - width/2;\r\n  let y = props.y - height/2;\r\n\r\n  \r\n  return (\r\n    <Image \r\n        image={image} \r\n        x={x} \r\n        y={y}\r\n        width={width} \r\n        height={height}\r\n        shadowBlur={props.shadowBlur} \r\n    />\r\n  )\r\n}\r\n\r\n\r\n\r\n//BenchReadyButton - need this for doing these\r\n\r\nexport class MagicEvent extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        renderMagic: true,\r\n      }\r\n      \r\n      this.interval = null;\r\n    }\r\n\r\n    getMagicEvent = () => {\r\n        let magicEvent = this.props.magicEvent\r\n        let magicCheck = magicEvent.type !== null\r\n\r\n        this.setState({\r\n            renderMagic: magicCheck\r\n        })\r\n            \r\n        this.interval = setTimeout(() => this.setState({renderMagic: false}), 1500);\r\n    }\r\n    \r\n    componentDidMount() {\r\n        this.getMagicEvent()\r\n        \r\n    }\r\n        \r\n    componentWillUnmount() {\r\n      clearInterval(this.interval);\r\n    }  \r\n\r\n    componentDidUpdate (prevProps) {\r\n      \r\n        if (this.props.magicEvent.type !== prevProps.magicEvent.type) {\r\n          //console.log('prev', prevProps, 'curr', this.props)\r\n            this.setState({renderMagic: true})\r\n            this.getMagicEvent()\r\n        }\r\n\r\n    }\r\n        \r\n    render() {\r\n        \r\n      return (\r\n        <React.Fragment>\r\n          { this.state.renderMagic ? <MagicImage\r\n           magicEvent={this.props.magicEvent}\r\n           x={this.props.x} \r\n           y={this.props.y} \r\n           scale={this.props.scale}\r\n           shadowBlur={15} /> : null }\r\n        </React.Fragment> \r\n      )\r\n    }\r\n  }\r\n\r\nexport const BenchReadyButton = (props) => {\r\n  let [unready] = useImage(benchUnready)\r\n  let [ready] = useImage(benchReady)\r\n  let stage = props.stage;\r\n  let image;\r\n  let shadowColor;\r\n    if (stage === 0) {\r\n      image = unready;\r\n      shadowColor = \"#ff0000\" \r\n    } else {\r\n      image = ready;\r\n      shadowColor = \"#4feb34\"\r\n    }\r\n\r\n  let scale = props.scale*8\r\n  let width = scale*imageRatio(image);\r\n  let height = scale;\r\n  let x = props.x //- width/2;\r\n  let y = props.y - height/2;\r\n  \r\n  \r\n  return (\r\n    <Image \r\n        image={image} \r\n        x={x} \r\n        y={y}\r\n        width={width} \r\n        height={height}\r\n        shadowBlur={props.shadowBlur} \r\n        shadowColor={shadowColor}\r\n        onClick={props.onClick}\r\n        onTap={props.onTap}\r\n    />\r\n  )\r\n}\r\n\r\nexport const SevenChoiceInstruction = (props) => {\r\n  let [higher] = useImage(higherArrow)\r\n  let [lower] = useImage(lowerArrow)\r\n  let choice = props.choice;\r\n  let image;\r\n    if (choice === 'higher') {\r\n      image = higher;\r\n    } else if (choice === 'lower') {\r\n      image = lower;\r\n    } else {\r\n      return null;\r\n    }\r\n\r\n  let scale = props.scale*5\r\n  let width = scale*imageRatio(image);\r\n  let height = scale;\r\n  let x = props.x - width;\r\n  let y = props.y - height/2;\r\n  \r\n  \r\n  return (\r\n    <Image \r\n        image={image} \r\n        x={x} \r\n        y={y}\r\n        width={width} \r\n        height={height}\r\n        shadowBlur={props.shadowBlur} \r\n        onClick={props.onClick}\r\n        onTap={props.onTap}\r\n    />\r\n  )\r\n}\r\n\r\n\r\nexport const GameOver = (props) => {\r\n  let tableState= props.tableState\r\n  let winnerID = props.winnerID\r\n  let matchData=props.matchData;\r\n  let playerID = props.playerID;\r\n  let winner=null;\r\n  let losers=[];\r\n  let width;\r\n  let height;\r\n  let fontsize = 2*tableState.cardScale;\r\n\r\n  const [loserImg] = useImage(loserScreen);\r\n  const [winnerImg] = useImage(winnerScreen);\r\n\r\n  \r\n  \r\n  for (let i=0; i<matchData.length; i++) {\r\n    if (i !== parseInt(winnerID) ) {\r\n      losers.push (matchData[i])\r\n    } else {\r\n      winner=matchData[i];\r\n    }\r\n  }\r\n\r\n  let loserNames=[]\r\n    losers.forEach(element => {\r\n      loserNames.push ( element.name )\r\n    });\r\n\r\n  if (playerID===winner.id) {\r\n    width = tableState.cardScale*25\r\n    height= width/imageRatio(winnerImg)\r\n    //retrun winner screen\r\n    return (\r\n      <Group>\r\n        <Image \r\n          image={winnerImg} \r\n          x={tableState.padx} \r\n          y={tableState.pady}\r\n          width={width} \r\n          height={height}\r\n        />\r\n        <Rect\r\n          x={tableState.padx} \r\n          y={tableState.pady+height}\r\n          width={width} \r\n          height={height}\r\n          fill={\"white\"}\r\n          opacity={0.5}\r\n        />\r\n        <Text\r\n          x={tableState.padx} \r\n          y={tableState.pady+3*height/2 - 3*fontsize}\r\n          text={`You Won!!!! mr cheeks says \\nwell done ${winner.name}`}\r\n          fontSize ={fontsize}\r\n        />\r\n        <Text\r\n          x={tableState.padx} \r\n          y={tableState.pady+3*height/2}\r\n          text={`Losers were:\\n${loserNames.join(\"\\n\")}`}\r\n          fontSize ={fontsize}\r\n        />\r\n      </Group>\r\n    )\r\n  } else {\r\n    //return loser screen\r\n    width = tableState.cardScale*25\r\n    height = width/imageRatio(loserImg)\r\n    return(\r\n      <Group>\r\n        <Image \r\n          image={loserImg} \r\n          x={tableState.padx} \r\n          y={tableState.pady}\r\n          width={width} \r\n          height={height}\r\n        />\r\n        <Rect\r\n          x={tableState.padx} \r\n          y={tableState.pady+height}\r\n          width={width} \r\n          height={height}\r\n          fill={\"white\"}\r\n          opacity={0.5}\r\n        />\r\n        <Text\r\n          x={tableState.padx} \r\n          y={tableState.pady+3*height/2- 4*fontsize}\r\n          text={`You lost :( but the winner \\n${winner.name} sent you this crab \\nwith their condolences`}\r\n          fontSize ={fontsize}\r\n          wrap\r\n        />\r\n        <Text\r\n          x={tableState.padx} \r\n          y={tableState.pady+3*height/2}\r\n          text={`Losers were:\\n${loserNames.join(\"\\n\")}`}\r\n          fontSize ={fontsize}\r\n        />\r\n      </Group>\r\n    )   \r\n  }\r\n}\r\n\r\n\r\nexport const Instructions = (props) => {\r\n  let [waiting] = useImage(waitingImg);\r\n  let [yourTurn] = useImage(yourTurnImg)\r\n  let currentPlayer = props.currentPlayer\r\n  let phase = props.phase;\r\n  let player = props.player\r\n  let x = props.x\r\n  let y = props.y\r\n  let scale = props.scale*10\r\n\r\n  const waitingRef = useRef(null)\r\n  const shoWhosTurn = useRef(false) //use this to show the player whos turn\r\n\r\n  useEffect(()=>{\r\n    let counter;\r\n    const onHover = () => {\r\n      counter = setTimeout(()=>{\r\n        console.log(\"hoviering\")\r\n      },500)\r\n    }\r\n\r\n    const stopCounter = () => {\r\n      clearTimeout(counter)\r\n    }\r\n\r\n    if (waitingRef.current!==null ) {\r\n      waitingRef.current.on('mouseover',()=>onHover()) \r\n      waitingRef.current.on('mouseout',()=>stopCounter() )\r\n    }\r\n\r\n    return () => {\r\n      stopCounter()\r\n    }\r\n\r\n  }, [waitingRef])\r\n\r\n  \r\n  if (phase==='StartPhase') {\r\n    return null\r\n  } else if (phase==='MainPhase') {\r\n      if (player.toString()===currentPlayer) { // instructions for player making turn\r\n        let width = scale*imageRatio(yourTurn);\r\n        let height = scale;\r\n        y = y - height/2\r\n        return (\r\n          <Image \r\n              image={yourTurn} \r\n              x={x} \r\n              y={y}\r\n              width={width} \r\n              height={height}\r\n              shadowBlur={props.shadowBlur} \r\n          />\r\n        )\r\n      } else { //instructions for everyone else\r\n        let width = scale*imageRatio(waiting);\r\n        let height = scale;\r\n        y = y - height/2\r\n        return (\r\n          <Image\r\n              ref={waitingRef}\r\n              image={waiting} \r\n              x={x} \r\n              y={y}\r\n              width={width} \r\n              height={height}\r\n              shadowBlur={props.shadowBlur} \r\n          />\r\n        )\r\n      }  \r\n  } else {\r\n    return null;\r\n  }\r\n}","C:\\Users\\alexw\\Documents\\programming projects\\SHED-online\\src\\pages\\gameroom.js",[],{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":327,"column":9,"nodeType":"57","messageId":"58","endLine":327,"endColumn":20},"no-native-reassign",["59"],"no-negated-in-lhs",["60"],"no-unused-vars","'shoWhosTurn' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]