[{"C:\\Users\\alexw\\Documents\\programming projects\\SHED-online\\src\\index.js":"1","C:\\Users\\alexw\\Documents\\programming projects\\SHED-online\\src\\reportWebVitals.js":"2","C:\\Users\\alexw\\Documents\\programming projects\\SHED-online\\src\\pages\\homescreen.js":"3","C:\\Users\\alexw\\Documents\\programming projects\\SHED-online\\src\\pages\\lobby.js":"4","C:\\Users\\alexw\\Documents\\programming projects\\SHED-online\\src\\config.js":"5","C:\\Users\\alexw\\Documents\\programming projects\\SHED-online\\src\\game\\Game.js":"6","C:\\Users\\alexw\\Documents\\programming projects\\SHED-online\\src\\game\\Table.js":"7","C:\\Users\\alexw\\Documents\\programming projects\\SHED-online\\src\\game\\card.js":"8","C:\\Users\\alexw\\Documents\\programming projects\\SHED-online\\src\\game\\CardImages.js":"9","C:\\Users\\alexw\\Documents\\programming projects\\SHED-online\\src\\game\\gameUI.js":"10","C:\\Users\\alexw\\Documents\\programming projects\\SHED-online\\src\\pages\\gameroom.js":"11","C:\\Users\\alexw\\Documents\\programming projects\\SHED-online\\src\\game\\Menu.js":"12","C:\\Users\\alexw\\Documents\\programming projects\\SHED-online\\src\\pages\\joinredirect.js":"13"},{"size":4520,"mtime":1619276176665,"results":"14","hashOfConfig":"15"},{"size":362,"mtime":499162500000,"results":"16","hashOfConfig":"15"},{"size":584,"mtime":1619208051812,"results":"17","hashOfConfig":"15"},{"size":9945,"mtime":1619454900177,"results":"18","hashOfConfig":"15"},{"size":156,"mtime":1619645071412,"results":"19","hashOfConfig":"15"},{"size":25045,"mtime":1619455049883,"results":"20","hashOfConfig":"15"},{"size":30937,"mtime":1619465489678,"results":"21","hashOfConfig":"15"},{"size":8409,"mtime":1619203346308,"results":"22","hashOfConfig":"15"},{"size":3679,"mtime":1619203369762,"results":"23","hashOfConfig":"15"},{"size":10341,"mtime":1619645030885,"results":"24","hashOfConfig":"15"},{"size":7652,"mtime":1619454900174,"results":"25","hashOfConfig":"15"},{"size":10017,"mtime":1619455169832,"results":"26","hashOfConfig":"15"},{"size":319,"mtime":1619208064423,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1le9xus",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"C:\\Users\\alexw\\Documents\\programming projects\\SHED-online\\src\\index.js",[],["56","57"],"C:\\Users\\alexw\\Documents\\programming projects\\SHED-online\\src\\reportWebVitals.js",[],"C:\\Users\\alexw\\Documents\\programming projects\\SHED-online\\src\\pages\\homescreen.js",[],"C:\\Users\\alexw\\Documents\\programming projects\\SHED-online\\src\\pages\\lobby.js",[],"C:\\Users\\alexw\\Documents\\programming projects\\SHED-online\\src\\config.js",[],"C:\\Users\\alexw\\Documents\\programming projects\\SHED-online\\src\\game\\Game.js",[],"C:\\Users\\alexw\\Documents\\programming projects\\SHED-online\\src\\game\\Table.js",[],"C:\\Users\\alexw\\Documents\\programming projects\\SHED-online\\src\\game\\card.js",[],"C:\\Users\\alexw\\Documents\\programming projects\\SHED-online\\src\\game\\CardImages.js",[],"C:\\Users\\alexw\\Documents\\programming projects\\SHED-online\\src\\game\\gameUI.js",["58"],"import React, { useRef, useEffect, useState } from \"react\";\r\nimport { Image, Group } from \"react-konva\";\r\nimport useImage from \"use-image\";\r\n//magic\r\nimport burn from \"../images/magicEvents/burn.png\";\r\nimport invisible from \"../images/magicEvents/Invis.png\";\r\nimport HighOrLow from \"../images/magicEvents/HighOrLow.png\";\r\nimport reset from \"../images/magicEvents/reset.png\";\r\n//ui\r\nimport wood from \"../images/UI/wood.png\";\r\nimport waitingImg from \"../images/UI/Waiting.png\";\r\nimport waitingHandsImg from \"../images/UI/WaitingHands.png\";\r\nimport yourTurnImg from \"../images/UI/YourTurn.png\";\r\n//end turn button\r\nimport endTurn from \"../images/UI/EndTurn.png\";\r\n//benchui\r\nimport benchReady from \"../images/UI/BenchReady.png\";\r\nimport benchUnready from \"../images/UI/BenchUnready.png\";\r\n//sevenchoices\r\nimport higherArrow from \"../images/magicEvents/HigherArrow.png\";\r\nimport lowerArrow from \"../images/magicEvents/LowerArrow.png\";\r\n//gameover\r\nimport winnerScreen from \"../images/Winner.png\";\r\nimport loserScreen from \"../images/Loser.png\";\r\n\r\nconst MagicImages = {\r\n  burn: burn,\r\n  invisble: invisible,\r\n  highOrLow: HighOrLow,\r\n  reset: reset,\r\n  wood: wood,\r\n};\r\n\r\nexport function imageRatio(image) {\r\n  //scale image\r\n  let imgRatio = 1;\r\n  if (image !== undefined) {\r\n    imgRatio = image.width / image.height;\r\n  }\r\n  return imgRatio;\r\n}\r\n\r\nconst MagicImage = (props) => {\r\n  let magicEvent = props.magicEvent;\r\n  let img;\r\n  switch (magicEvent.type) {\r\n    case \"burning\":\r\n      img = MagicImages.burn;\r\n      break;\r\n    case \"Invisible\":\r\n      img = MagicImages.invisble;\r\n      break;\r\n    case \"reset\":\r\n      img = MagicImages.reset;\r\n      break;\r\n    case \"Higher or lower\":\r\n      img = MagicImages.highOrLow;\r\n      break;\r\n    default:\r\n      img = MagicImages.wood;\r\n      break;\r\n  }\r\n\r\n  const [image] = useImage(img);\r\n  let scale = props.scale * 30;\r\n  let width = scale * imageRatio(image);\r\n  let height = scale;\r\n  let x = props.x - width / 2;\r\n  let y = props.y - height / 2;\r\n\r\n  return (\r\n    <Image\r\n      image={image}\r\n      x={x}\r\n      y={y}\r\n      width={width}\r\n      height={height}\r\n      shadowBlur={props.shadowBlur}\r\n    />\r\n  );\r\n};\r\n\r\nexport class MagicEvent extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      renderMagic: true,\r\n    };\r\n\r\n    this.interval = null;\r\n  }\r\n\r\n  getMagicEvent = () => {\r\n    let magicEvent = this.props.magicEvent;\r\n    let magicCheck = magicEvent.type !== null;\r\n\r\n    this.setState({\r\n      renderMagic: magicCheck,\r\n    });\r\n\r\n    this.interval = setTimeout(\r\n      () => this.setState({ renderMagic: false }),\r\n      1500\r\n    );\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getMagicEvent();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.interval);\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.magicEvent.type !== prevProps.magicEvent.type) {\r\n      this.setState({ renderMagic: true });\r\n      this.getMagicEvent();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        {this.state.renderMagic ? (\r\n          <MagicImage\r\n            magicEvent={this.props.magicEvent}\r\n            x={this.props.x}\r\n            y={this.props.y}\r\n            scale={this.props.scale}\r\n            shadowBlur={15}\r\n          />\r\n        ) : null}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport const EndTurnButton = (props) => {\r\n  let [UnPressed] = useImage(endTurn);\r\n  let scale = props.scale * 8;\r\n  let width = scale * imageRatio(UnPressed);\r\n  let height = scale;\r\n  let x = props.x - width / 2;\r\n  let y = props.y - height / 2;\r\n\r\n  return (\r\n    <Image\r\n      image={UnPressed}\r\n      x={x}\r\n      y={y}\r\n      width={width}\r\n      height={height}\r\n      shadowBlur={props.shadowBlur}\r\n      onClick={props.onClick}\r\n      onTap={props.onTap}\r\n    />\r\n  );\r\n};\r\n\r\nexport const BenchReadyButton = (props) => {\r\n  let [unready] = useImage(benchUnready);\r\n  let [ready] = useImage(benchReady);\r\n  let stage = props.stage;\r\n  let image;\r\n  let shadowColor;\r\n  if (stage === 0) {\r\n    image = unready;\r\n    shadowColor = \"#ff0000\";\r\n  } else {\r\n    image = ready;\r\n    shadowColor = \"#4feb34\";\r\n  }\r\n\r\n  let scale = props.scale * 8;\r\n  let width = scale * imageRatio(image);\r\n  let height = scale;\r\n  let x = props.x;\r\n  let y = props.y - height / 2;\r\n\r\n  return (\r\n    <Image\r\n      image={image}\r\n      x={x}\r\n      y={y}\r\n      width={width}\r\n      height={height}\r\n      shadowBlur={props.shadowBlur}\r\n      shadowColor={shadowColor}\r\n      onClick={props.onClick}\r\n      onTap={props.onTap}\r\n    />\r\n  );\r\n};\r\n\r\nexport const SevenChoiceInstruction = (props) => {\r\n  let [higher] = useImage(higherArrow);\r\n  let [lower] = useImage(lowerArrow);\r\n  let choice = props.choice;\r\n  let image;\r\n  if (choice === \"higher\") {\r\n    image = higher;\r\n  } else if (choice === \"lower\") {\r\n    image = lower;\r\n  } else {\r\n    return null;\r\n  }\r\n\r\n  let scale = props.scale * 5;\r\n  let width = scale * imageRatio(image);\r\n  let height = scale;\r\n  let x = props.x - width;\r\n  let y = props.y - height / 2;\r\n\r\n  return (\r\n    <Image\r\n      image={image}\r\n      x={x}\r\n      y={y}\r\n      width={width}\r\n      height={height}\r\n      shadowBlur={props.shadowBlur}\r\n      onClick={props.onClick}\r\n      onTap={props.onTap}\r\n    />\r\n  );\r\n};\r\n\r\nexport const GameOver = (props) => {\r\n  let namesOrdered = []\r\n  \r\n  for (let i=0; i < props.winningOrder.length; i++) {\r\n    namesOrdered.push(props.playerNames[parseInt(props.winningOrder[i])])\r\n  };\r\n\r\n\r\n  const Rankings = () => (\r\n    <div id=\"EndScreenRankings\" >loosing order:\r\n        <div>\r\n          {namesOrdered.slice(1, namesOrdered.length).map((name, index)=>{\r\n            return <div key={index}>{index+2}. {name}</div> \r\n          })}\r\n        </div>\r\n      </div>\r\n  )\r\n\r\n  if (Number(props.playerID) === Number(props.winningOrder[0])) {\r\n    return (\r\n      <div>\r\n        <div id=\"EndScreenMessage\">\r\n          <img\r\n            className=\"EndScreenImage\"\r\n            src={winnerScreen}\r\n            alt={wood}\r\n          />\r\n          Well done {namesOrdered[0]}, you won!\r\n          {namesOrdered.length>1 && (<Rankings />)}\r\n        </div>\r\n      </div>\r\n      \r\n    );\r\n  } else {\r\n    return (\r\n      <div id=\"EndScreenMessage\">\r\n        <img\r\n          className=\"EndScreenImage\"\r\n          src={loserScreen}\r\n          alt={wood}\r\n        />\r\n        Unlucky, you lost! {namesOrdered[0]} Won!\r\n        {namesOrdered.length>1 && (<Rankings />)}\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport class FinishedMessage extends React.Component {\r\n  constructor (props) {\r\n    super(props);\r\n    this.state = {\r\n      show: false,\r\n    };\r\n    this.interval = null;\r\n  }\r\n\r\n  componentDidUpdate (prevProps) {\r\n    if (prevProps.winningOrder!==this.props.winningOrder && this.props.winningOrder.length !==0) {\r\n      this.setState({\r\n        show: true\r\n      })\r\n\r\n      this.interval = setTimeout(\r\n        () => this.setState({\r\n          show: false\r\n        }), 5000\r\n      );\r\n    }\r\n  }\r\n\r\n    \r\n  render() {\r\n    let winningOrder = this.props.winningOrder\r\n    let place = winningOrder.length.toString()\r\n    let finishedPosition = place === \"1\" ? \"1st\" : place ===\"2\" ? \"2nd\": place===\"3\" ? \"3rd\": place===\"4\"? \"4th\": \"\" \r\n    let finishedPlayerID = winningOrder[winningOrder.length-1]\r\n    let finishedName = this.props.playerNames[finishedPlayerID]\r\n    \r\n    let finishedMessage = `Well done ${finishedName}! you came ${finishedPosition}! Waiting for others to finish...`\r\n    let otherMessage = `${finishedName} has finished ${finishedPosition}! keep on going...`\r\n\r\n    if (this.state.show) {\r\n      return (\r\n        <div id=\"finishedMessage\" style={this.props.player === finishedPlayerID?{backgroundColor:\"rgba(9, 255, 0, 0.6)\"}:{}}>\r\n          {this.props.player === finishedPlayerID? finishedMessage : otherMessage}\r\n        </div>\r\n        )\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n  \r\n}\r\n\r\n\r\nexport const Instructions = (props) => {\r\n  let [waiting] = useImage(waitingImg);\r\n  let [waitingHands] = useImage(waitingHandsImg)\r\n  let [yourTurn] = useImage(yourTurnImg);\r\n  let currentPlayer = props.currentPlayer;\r\n  let phase = props.phase;\r\n  let player = props.player;\r\n  let numPlayers = props.numPlayers\r\n  let x = props.x;\r\n  let y = props.y;\r\n  let scale = props.scale * 10;\r\n  const handsRef = useRef(null)\r\n  \r\n  useEffect(()=>{\r\n   // sethandPosition(Number(currentPlayer))\r\n  }, [currentPlayer])\r\n\r\n  useEffect(()=>{\r\n    const rotateHand = () => {\r\n      handsRef.current.to({\r\n        rotation: (Number(currentPlayer)+1)*90,\r\n        duration: (Number(currentPlayer)+1)\r\n      })\r\n\r\n    }\r\n\r\n    if (handsRef.current !== null) {\r\n      rotateHand()\r\n    }\r\n\r\n  }, [handsRef, currentPlayer, numPlayers])\r\n\r\n  \r\n\r\n  if (phase === \"StartPhase\") {\r\n    return null;\r\n  } else if (phase === \"MainPhase\") {\r\n    if (player.toString() === currentPlayer) {\r\n      // instructions for player making turn\r\n      let width = scale * imageRatio(yourTurn);\r\n      let height = scale;\r\n      y = y - height / 2;\r\n      return (\r\n        <Image\r\n          image={yourTurn}\r\n          x={x}\r\n          y={y}\r\n          width={width}\r\n          height={height}\r\n          shadowBlur={props.shadowBlur}\r\n        />\r\n      );\r\n    } else {\r\n      //instructions for everyone else\r\n      let width = scale * imageRatio(waiting);\r\n      let height = scale;\r\n      y = y - height / 2;\r\n\r\n      let widthHands  = scale/4 * imageRatio(waitingHands)\r\n      let heightHands = scale/4\r\n      let xoffset = 2*widthHands/5\r\n      let yoffset = 9*heightHands/10\r\n      let xHands= x + width/2 -xoffset\r\n      let yHands = y  + height/2 +yoffset/2\r\n\r\n      return (\r\n        <Group>\r\n          <Image\r\n            image={waiting}\r\n            x={x}\r\n            y={y}\r\n            width={width}\r\n            height={height}\r\n            shadowBlur={props.shadowBlur}\r\n          />\r\n          <Image\r\n            ref={handsRef}\r\n            image={waitingHands}\r\n            x={xHands}\r\n            y={yHands}\r\n            width={widthHands}\r\n            height={heightHands}\r\n            rotation={0}\r\n            offset={{\r\n              x: xoffset,\r\n              y: yoffset\r\n            }}\r\n            shadowBlur={props.shadowBlur}\r\n          />\r\n      </Group>\r\n        \r\n      );\r\n    }\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n","C:\\Users\\alexw\\Documents\\programming projects\\SHED-online\\src\\pages\\gameroom.js",[],"C:\\Users\\alexw\\Documents\\programming projects\\SHED-online\\src\\game\\Menu.js",[],"C:\\Users\\alexw\\Documents\\programming projects\\SHED-online\\src\\pages\\joinredirect.js",[],{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","severity":1,"message":"64","line":1,"column":36,"nodeType":"65","messageId":"66","endLine":1,"endColumn":44},"no-native-reassign",["67"],"no-negated-in-lhs",["68"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]