[{"C:\\Users\\alexw\\Documents\\programming projects\\SHED-online\\src\\index.js":"1","C:\\Users\\alexw\\Documents\\programming projects\\SHED-online\\src\\reportWebVitals.js":"2","C:\\Users\\alexw\\Documents\\programming projects\\SHED-online\\src\\pages\\homescreen.js":"3","C:\\Users\\alexw\\Documents\\programming projects\\SHED-online\\src\\pages\\lobby.js":"4","C:\\Users\\alexw\\Documents\\programming projects\\SHED-online\\src\\config.js":"5","C:\\Users\\alexw\\Documents\\programming projects\\SHED-online\\src\\game\\Game.js":"6","C:\\Users\\alexw\\Documents\\programming projects\\SHED-online\\src\\game\\Table.js":"7","C:\\Users\\alexw\\Documents\\programming projects\\SHED-online\\src\\game\\player.js":"8","C:\\Users\\alexw\\Documents\\programming projects\\SHED-online\\src\\game\\card.js":"9","C:\\Users\\alexw\\Documents\\programming projects\\SHED-online\\src\\game\\CardImages.js":"10","C:\\Users\\alexw\\Documents\\programming projects\\SHED-online\\src\\game\\gameUI.js":"11"},{"size":1190,"mtime":1613943704026,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":499162500000,"results":"14","hashOfConfig":"13"},{"size":1393,"mtime":1613943704027,"results":"15","hashOfConfig":"13"},{"size":7496,"mtime":1614026806105,"results":"16","hashOfConfig":"13"},{"size":148,"mtime":1614027640471,"results":"17","hashOfConfig":"13"},{"size":24499,"mtime":1614104464217,"results":"18","hashOfConfig":"13"},{"size":18545,"mtime":1614017975257,"results":"19","hashOfConfig":"13"},{"size":619,"mtime":1613912752182,"results":"20","hashOfConfig":"13"},{"size":5129,"mtime":1613756678975,"results":"21","hashOfConfig":"13"},{"size":3305,"mtime":1613756562432,"results":"22","hashOfConfig":"13"},{"size":4844,"mtime":1614028663075,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"19mmtle",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"26"},"C:\\Users\\alexw\\Documents\\programming projects\\SHED-online\\src\\index.js",[],["49","50"],"C:\\Users\\alexw\\Documents\\programming projects\\SHED-online\\src\\reportWebVitals.js",[],"C:\\Users\\alexw\\Documents\\programming projects\\SHED-online\\src\\pages\\homescreen.js",["51","52","53","54","55","56"],"import React from 'react';\r\nimport { Lobby } from \"./lobby\";\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link,\r\n    useLocation,\r\n  } from \"react-router-dom\";\r\nimport \"./Style.css\"\r\nimport ShedLogo from '../images/Logo.png'\r\nimport wood from '../images/UI/wood.png'\r\n\r\n\r\n\r\nexport const Homescreen = (props) => {\r\n    let history = props.history;\r\n\r\n    const  Title = (props) => {\r\n        return(\r\n            <div>\r\n                <img src={ShedLogo} alt={wood} className=\"ShedLogo\"/>\r\n            </div>  \r\n        )\r\n    }\r\n\r\n    const  PlayButton = (props) => {\r\n        return (\r\n            <div>\r\n                <button className=\"playButton\" onClick={()=>history.push('/lobby')}>\r\n                    Play\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    \r\n    let location = useLocation()\r\n    \r\n\r\n    return( \r\n        <div>\r\n            <Title title={'Homescreen title'}/>\r\n            <PlayButton  />\r\n        </div>       \r\n    );  \r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default Homescreen;","C:\\Users\\alexw\\Documents\\programming projects\\SHED-online\\src\\pages\\lobby.js",[],"C:\\Users\\alexw\\Documents\\programming projects\\SHED-online\\src\\config.js",[],"C:\\Users\\alexw\\Documents\\programming projects\\SHED-online\\src\\game\\Game.js",[],"C:\\Users\\alexw\\Documents\\programming projects\\SHED-online\\src\\game\\Table.js",[],"C:\\Users\\alexw\\Documents\\programming projects\\SHED-online\\src\\game\\player.js",[],"C:\\Users\\alexw\\Documents\\programming projects\\SHED-online\\src\\game\\card.js",[],"C:\\Users\\alexw\\Documents\\programming projects\\SHED-online\\src\\game\\CardImages.js",[],"C:\\Users\\alexw\\Documents\\programming projects\\SHED-online\\src\\game\\gameUI.js",["57"],"import React from \"react\"; //, { useEffect, useState }\r\nimport { Image } from 'react-konva';\r\nimport useImage from 'use-image';\r\n//magic\r\nimport burn from '../images/magicEvents/burn.png'\r\nimport invisible from '../images/magicEvents/Invis.png'\r\nimport HighOrLow from '../images/magicEvents/HighOrLow.png'\r\nimport reset from '../images/magicEvents/reset.png'\r\n//ui\r\nimport wood from '../images/UI/wood.png'\r\n//benchui\r\nimport benchReady from '../images/UI/BenchReady.png'\r\nimport benchUnready from '../images/UI/BenchUnready.png'\r\n//sevenchoices\r\nimport higherArrow from '../images/magicEvents/HigherArrow.png'\r\nimport lowerArrow from '../images/magicEvents/LowerArrow.png'\r\n\r\n\r\nconst MagicImages = {\r\n  burn: burn,\r\n  invisble: invisible,\r\n  highOrLow: HighOrLow,\r\n  reset: reset,\r\n  wood: wood,\r\n}\r\n\r\nfunction imageRatio (image) {\r\n  //scale image\r\n  let imgRatio=1; //inni to 1 ao image still renders\r\n  if (image !== undefined) {\r\n    imgRatio = image.width/image.height\r\n  }\r\n  return imgRatio //default\r\n}\r\n\r\nconst MagicImage = (props) => {\r\n  let magicEvent = props.magicEvent;\r\n  let img;\r\n  switch (magicEvent.type) {\r\n    case 'burning': \r\n      img = MagicImages.burn\r\n      break;\r\n    case 'Invisible':\r\n      img = MagicImages.invisble\r\n      break;\r\n    case 'reset':\r\n      img = MagicImages.reset\r\n      break;\r\n    case 'Higher or lower':\r\n      img = MagicImages.highOrLow\r\n      break;\r\n    default: \r\n    img = MagicImages.wood\r\n    break;\r\n  }\r\n\r\n  const [image] = useImage(img);\r\n  let scale = props.scale*30\r\n  let width = scale*imageRatio(image);\r\n  let height = scale;\r\n  let x = props.x - width/2;\r\n  let y = props.y - height/2;\r\n\r\n  \r\n  return (\r\n    <Image \r\n        image={image} \r\n        x={x} \r\n        y={y}\r\n        width={width} \r\n        height={height}\r\n        shadowBlur={props.shadowBlur} \r\n    />\r\n  )\r\n}\r\n\r\n\r\n\r\n//BenchReadyButton - need this for doing these\r\n\r\n\r\nexport class MagicEvent extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        renderMagic: true,\r\n      }\r\n      \r\n      this.interval = null;\r\n    }\r\n\r\n    getMagicEvent = () => {\r\n        let magicEvent = this.props.magicEvent\r\n        let magicCheck = magicEvent.type !== null\r\n\r\n        this.setState({\r\n            renderMagic: magicCheck\r\n        })\r\n            \r\n        this.interval = setTimeout(() => this.setState({renderMagic: false}), 1500);\r\n    }\r\n    \r\n    componentDidMount() {\r\n        this.getMagicEvent()\r\n        \r\n    }\r\n        \r\n    componentWillUnmount() {\r\n      clearInterval(this.interval);\r\n    }  \r\n\r\n    componentDidUpdate (prevProps) {\r\n      \r\n        if (this.props.magicEvent.type !== prevProps.magicEvent.type) {\r\n          //console.log('prev', prevProps, 'curr', this.props)\r\n            this.setState({renderMagic: true})\r\n            this.getMagicEvent()\r\n        }\r\n\r\n    }\r\n        \r\n    render() {\r\n        \r\n      return (\r\n        <React.Fragment>\r\n          { this.state.renderMagic ? <MagicImage\r\n           magicEvent={this.props.magicEvent}\r\n           x={this.props.x} \r\n           y={this.props.y} \r\n           scale={this.props.scale}\r\n           shadowBlur={15} /> : null }\r\n        </React.Fragment> \r\n      )\r\n    }\r\n  }\r\n\r\nexport const BenchReadyButton = (props) => {\r\n  let [unready] = useImage(benchUnready)\r\n  let [ready] = useImage(benchReady)\r\n  let stage = props.stage;\r\n  let image;\r\n  let shadowColor;\r\n    if (stage === 0) {\r\n      image = unready;\r\n      shadowColor = \"#ff0000\" \r\n    } else {\r\n      image = ready;\r\n      shadowColor = \"#4feb34\"\r\n    }\r\n\r\n  let scale = props.scale*15\r\n  let width = scale*imageRatio(image);\r\n  let height = scale;\r\n  let x = props.x //- width/2;\r\n  let y = props.y - height/2;\r\n  \r\n  \r\n  return (\r\n    <Image \r\n        image={image} \r\n        x={x} \r\n        y={y}\r\n        width={width} \r\n        height={height}\r\n        shadowBlur={props.shadowBlur} \r\n        shadowColor={shadowColor}\r\n        onClick={props.onClick}\r\n        onTap={props.onTap}\r\n    />\r\n  )\r\n}\r\n\r\nexport const SevenChoiceInstruction = (props) => {\r\n  let [higher] = useImage(higherArrow)\r\n  let [lower] = useImage(lowerArrow)\r\n  let choice = props.choice;\r\n  let image;\r\n    if (choice === 'higher') {\r\n      image = higher;\r\n    } else if (choice === 'lower') {\r\n      image = lower;\r\n    } else {\r\n      return null;\r\n    }\r\n\r\n  let scale = props.scale*7\r\n  let width = scale*imageRatio(image);\r\n  let height = scale;\r\n  let x = props.x //- width/2;\r\n  let y = props.y - height/2;\r\n  \r\n  \r\n  return (\r\n    <Image \r\n        image={image} \r\n        x={x} \r\n        y={y}\r\n        width={width} \r\n        height={height}\r\n        shadowBlur={props.shadowBlur} \r\n        onClick={props.onClick}\r\n        onTap={props.onTap}\r\n    />\r\n  )\r\n}\r\n\r\n\r\nexport const GameOver = (props) => {\r\n  let winner = props.winner\r\n}\r\n",{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","severity":1,"message":"63","line":2,"column":10,"nodeType":"64","messageId":"65","endLine":2,"endColumn":15},{"ruleId":"62","severity":1,"message":"66","line":4,"column":22,"nodeType":"64","messageId":"65","endLine":4,"endColumn":28},{"ruleId":"62","severity":1,"message":"67","line":5,"column":5,"nodeType":"64","messageId":"65","endLine":5,"endColumn":11},{"ruleId":"62","severity":1,"message":"68","line":6,"column":5,"nodeType":"64","messageId":"65","endLine":6,"endColumn":10},{"ruleId":"62","severity":1,"message":"69","line":7,"column":5,"nodeType":"64","messageId":"65","endLine":7,"endColumn":9},{"ruleId":"62","severity":1,"message":"70","line":38,"column":9,"nodeType":"64","messageId":"65","endLine":38,"endColumn":17},{"ruleId":"62","severity":1,"message":"71","line":209,"column":7,"nodeType":"64","messageId":"65","endLine":209,"endColumn":13},"no-native-reassign",["72"],"no-negated-in-lhs",["73"],"no-unused-vars","'Lobby' is defined but never used.","Identifier","unusedVar","'Router' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","'Link' is defined but never used.","'location' is assigned a value but never used.","'winner' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]